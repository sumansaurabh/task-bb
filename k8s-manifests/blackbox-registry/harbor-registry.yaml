apiVersion: v1
kind: Namespace
metadata:
  name: harbor
  labels:
    name: harbor
---
apiVersion: v1
kind: Secret
metadata:
  name: harbor-admin-secret
  namespace: harbor
type: Opaque
data:
  # Base64 encoded password for Harbor admin user
  # echo -n "Harbor12345" | base64
  password: SGFyYm9yMTIzNDU=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-registry-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-chartmuseum-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-database-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harbor-redis-pvc
  namespace: harbor
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-config
  namespace: harbor
data:
  app.conf: |
    appname = Harbor
    runmode = prod
    [prod]
    httpport = 8080
---
# PostgreSQL Database for Harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-database
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-database
  template:
    metadata:
      labels:
        app: harbor-database
    spec:
      containers:
      - name: database
        image: postgres:15.14 
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        - name: POSTGRES_DB
          value: "registry"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: database-storage
        persistentVolumeClaim:
          claimName: harbor-database-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-database
  namespace: harbor
spec:
  selector:
    app: harbor-database
  ports:
  - port: 5432
    targetPort: 5432
---
# Redis for Harbor
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-redis
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-redis
  template:
    metadata:
      labels:
        app: harbor-redis
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: harbor-redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-redis
  namespace: harbor
spec:
  selector:
    app: harbor-redis
  ports:
  - port: 6379
    targetPort: 6379
---
# Harbor Core
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-core
  template:
    metadata:
      labels:
        app: harbor-core
    spec:
      containers:
      - name: harbor-core
        image: goharbor/harbor-core:v2.9.1
        ports:
        - containerPort: 8080
        env:
        - name: CORE_SECRET
          value: "not-a-secure-key"
        - name: JOBSERVICE_SECRET
          value: "not-a-secure-key"
        - name: ADMIRAL_URL
          value: "NA"
        - name: WITH_NOTARY
          value: "false"
        - name: WITH_TRIVY
          value: "true"
        - name: WITH_CHARTMUSEUM
          value: "true"
        - name: CHART_REPOSITORY_URL
          value: "http://harbor-chartmuseum:9999"
        - name: LOG_LEVEL
          value: "info"
        - name: CONFIG_PATH
          value: "/etc/core/app.conf"
        - name: DATABASE_TYPE
          value: "postgresql"
        - name: POSTGRESQL_HOST
          value: "harbor-database"
        - name: POSTGRESQL_PORT
          value: "5432"
        - name: POSTGRESQL_USERNAME
          value: "postgres"
        - name: POSTGRESQL_PASSWORD
          value: "postgres"
        - name: POSTGRESQL_DATABASE
          value: "registry"
        - name: REGISTRY_URL
          value: "http://harbor-registry:5000"
        - name: REDIS_URL
          value: "redis://harbor-redis:6379/0"
        - name: EXT_ENDPOINT
          value: "https://harbor.bareflux.com"
        volumeMounts:
        - name: config
          mountPath: /etc/core
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: harbor-config
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  namespace: harbor
spec:
  selector:
    app: harbor-core
  ports:
  - port: 8080
    targetPort: 8080
---
# Harbor Registry
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-registry
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-registry
  template:
    metadata:
      labels:
        app: harbor-registry
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:v2.9.1
        ports:
        - containerPort: 5000
        env:
        - name: REGISTRY_HTTP_SECRET
          value: "not-a-secure-key"
        volumeMounts:
        - name: registry-storage
          mountPath: /storage
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: registry-storage
        persistentVolumeClaim:
          claimName: harbor-registry-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-registry
  namespace: harbor
spec:
  selector:
    app: harbor-registry
  ports:
  - port: 5000
    targetPort: 5000
---
# Harbor Portal (Web UI)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor-portal
  template:
    metadata:
      labels:
        app: harbor-portal
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:v2.9.1
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: harbor-portal
  namespace: harbor
spec:
  selector:
    app: harbor-portal
  ports:
  - port: 8080
    targetPort: 8080
---
# Harbor Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: harbor-ingress
  namespace: harbor
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - harbor.bareflux.com
    secretName: harbor-tls
  rules:
  - host: harbor.bareflux.com
    http:
      paths:
      - path: /v2
        pathType: Prefix
        backend:
          service:
            name: harbor-registry
            port:
              number: 5000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: harbor-core
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          service:
            name: harbor-portal
            port:
              number: 8080
