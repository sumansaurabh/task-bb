# Service Account for API access
apiVersion: v1
kind: Secret
metadata:
  name: harbor-registry-secret
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  # Base64 encoded docker config for harbor.bareflux.co with admin/admin
  .dockerconfigjson: eyJhdXRocyI6eyJoYXJib3IuYmFyZWZsdXguY28iOnsidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwiYXV0aCI6IllXUnRhVzQ2WVdSdGFXND0ifX19
---
apiVersion: v1
kind: Secret
metadata:
  name: app-env-secrets
  namespace: default
type: Opaque
data:
  # Add your private environment variables here (base64 encoded)
  # Example: DATABASE_PASSWORD: <base64-encoded-password>
  # Example: API_KEY: <base64-encoded-api-key>
  DATABASE_URL: "cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NTQzMi9kYXRhYmFzZQ=="  # placeholder: postgresql://user:pass@localhost:5432/database
  API_SECRET: "bXktYXBpLXNlY3JldC1rZXk="    # placeholder: my-api-secret-key
  JWT_SECRET: "bXktand0LXNlY3JldC1rZXk="    # placeholder: my-jwt-secret-key
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nodejs-service-account
  namespace: default
imagePullSecrets:
- name: harbor-registry-secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-manager
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nodejs-service-account-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: nodejs-service-account
  namespace: default
roleRef:
  kind: Role
  name: pod-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-app
  namespace: default
  labels:
    app: nodejs-app
spec:
  replicas: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0  # Prevent forced termination
      maxSurge: 5        # Allow more new pods during update
  selector:
    matchLabels:
      app: nodejs-app
  template:
    metadata:
      labels:
        app: nodejs-app
      annotations:
        vault.security.banzaicloud.io/vault-addr: "http://vault.default:8200"
        vault.security.banzaicloud.io/vault-role: "default"
        vault.security.banzaicloud.io/vault-skip-verify: "true"   # remove if you have valid TLS
        vault.security.banzaicloud.io/vault-env-injection: "true"
        vault.security.banzaicloud.io/vault-path: "kubernetes"
        vault.security.banzaicloud.io/vault-ignore-missing-secrets: "true"
    spec:
      serviceAccountName: nodejs-service-account
      imagePullSecrets:
      - name: harbor-registry-secret
      containers:
      - name: nodejs-app
        image: harbor.bareflux.co/vibe-coding/vibe-coding-platform@sha256:751a3a36b6eccfc7572b00967fd7afece43ac0687e2f64c163782a91bd5448c2
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: VERSION
          value: "latest"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        # Private environment variables from secrets
        - name: GITHUB_CLIENT_ID
          value: vault:secret/data/app#GITHUB_CLIENT_ID
        - name: GITHUB_CLIENT_SECRET
          value: vault:secret/data/app#GITHUB_CLIENT_SECRET
        - name: GITHUB_DEPLOY_TOKEN
          value: vault:secret/data/app#GITHUB_DEPLOY_TOKEN
        - name: GITHUB_DEPLOY_USERNAME
          value: vault:secret/data/app#GITHUB_DEPLOY_USERNAME
        - name: GOOGLE_CLIENT_ID
          value: vault:secret/data/app#GOOGLE_CLIENT_ID
        - name: GOOGLE_CLIENT_SECRET
          value: vault:secret/data/app#GOOGLE_CLIENT_SECRET
        - name: LITELLM_BASE_URL
          value: vault:secret/data/app#LITELLM_BASE_URL
        - name: MONGODB_URI
          value: vault:secret/data/app#MONGODB_URI
        - name: NEXTAUTH_SECRET
          value: vault:secret/data/app#NEXTAUTH_SECRET
        - name: NEXTAUTH_URL
          value: vault:secret/data/app#NEXTAUTH_URL
        - name: OPENAI_API_KEY
          value: vault:secret/data/app#OPENAI_API_KEY
        - name: STRIPE_SECRET_KEY
          value: vault:secret/data/app#STRIPE_SECRET_KEY
        - name: VERCEL_DEPLOY_TOKEN
          value: vault:secret/data/app#VERCEL_DEPLOY_TOKEN
        - name: VERCEL_OIDC_TOKEN
          value: vault:secret/data/app#VERCEL_OIDC_TOKEN
        - name: VERCEL_TEAM_ID
          value: vault:secret/data/app#VERCEL_TEAM_ID
        - name: VERCEL_PROJECT_ID
          value: vault:secret/data/app#VERCEL_PROJECT_ID
        - name: VERCEL_TOKEN
          value: vault:secret/data/app#VERCEL_TOKEN
        - name: KV_USER_URL
          value: vault:secret/data/app#KV_USER_URL
        - name: KV_USER_TOKEN
          value: vault:secret/data/app#KV_USER_TOKEN
        - name: KV_RATE_URL
          value: vault:secret/data/app#KV_RATE_URL
        - name: KV_RATE_TOKEN
          value: vault:secret/data/app#KV_RATE_TOKEN
        - name: PAYMENT_SERVER
          value: vault:secret/data/app#PAYMENT_SERVER
        - name: E2B_API_KEY
          value: vault:secret/data/app#E2B_API_KEY
        - name: E2B_SANDBOX_TEMPLATE_ID
          value: vault:secret/data/app#E2B_SANDBOX_TEMPLATE_ID
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        lifecycle:
          preStop:
            httpGet:
              path: /api/shutdown
              port: 3000
              scheme: HTTP
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nodejs-app
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 600  # 10 minutes for LRO completion
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-app-service
  labels:
    app: nodejs-app
  annotations:
    # Annotations for better streaming support
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
spec:
  selector:
    app: nodejs-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
  # Session affinity to keep streaming connections to same pod
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour timeout for streaming sessions