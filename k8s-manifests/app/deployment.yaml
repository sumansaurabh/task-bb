# Service Account for API access
apiVersion: v1
kind: Secret
metadata:
  name: harbor-registry-secret
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  # Base64 encoded docker config for harbor.bareflux.co with admin/admin
  .dockerconfigjson: eyJhdXRocyI6eyJoYXJib3IuYmFyZWZsdXguY28iOnsidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiYWRtaW4iLCJlbWFpbCI6ImFkbWluQGV4YW1wbGUuY29tIiwiYXV0aCI6IllXUnRhVzQ2WVdSdGFXND0ifX19
---
apiVersion: v1
kind: Secret
metadata:
  name: app-env-secrets
  namespace: default
type: Opaque
data:
  # Add your private environment variables here (base64 encoded)
  # Example: DATABASE_PASSWORD: <base64-encoded-password>
  # Example: API_KEY: <base64-encoded-api-key>
  DATABASE_URL: "cG9zdGdyZXNxbDovL3VzZXI6cGFzc0Bsb2NhbGhvc3Q6NTQzMi9kYXRhYmFzZQ=="  # placeholder: postgresql://user:pass@localhost:5432/database
  API_SECRET: "bXktYXBpLXNlY3JldC1rZXk="    # placeholder: my-api-secret-key
  JWT_SECRET: "bXktand0LXNlY3JldC1rZXk="    # placeholder: my-jwt-secret-key
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nodejs-service-account
  namespace: default
imagePullSecrets:
- name: harbor-registry-secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-manager
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "patch", "update"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nodejs-service-account-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: nodejs-service-account
  namespace: default
roleRef:
  kind: Role
  name: pod-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nodejs-app
  namespace: default
  labels:
    app: nodejs-app
spec:
  replicas: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0  # Prevent forced termination
      maxSurge: 5        # Allow more new pods during update
  selector:
    matchLabels:
      app: nodejs-app
  template:
    metadata:
      labels:
        app: nodejs-app
    spec:
      serviceAccountName: nodejs-service-account
      imagePullSecrets:
      - name: harbor-registry-secret
      containers:
      - name: nodejs-app
        image: harbor.bareflux.co/vibe-coding/vibe-coding-platform:optimisation-safari-focus
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: VERSION
          value: "latest"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        # Private environment variables from secrets
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: app-env-secrets
              key: DATABASE_URL
        - name: API_SECRET
          valueFrom:
            secretKeyRef:
              name: app-env-secrets
              key: API_SECRET
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-env-secrets
              key: JWT_SECRET
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        lifecycle:
          preStop:
            httpGet:
              path: /api/shutdown
              port: 3000
              scheme: HTTP
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - nodejs-app
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 600  # 10 minutes for LRO completion
---
apiVersion: v1
kind: Service
metadata:
  name: nodejs-app-service
  labels:
    app: nodejs-app
  annotations:
    # Annotations for better streaming support
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
spec:
  selector:
    app: nodejs-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
  type: ClusterIP
  # Session affinity to keep streaming connections to same pod
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour timeout for streaming sessions