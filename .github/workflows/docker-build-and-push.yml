# .github/workflows/deploy.yaml
name: Build and Deploy Latest

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHC_TOKEN }}

    - name: Build and push with tags
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ghcr.io/sumansaurabh/task-bb/backend:latest
          ghcr.io/sumansaurabh/task-bb/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
     
    - name: Get ArgoCD Token
      id: argocd-auth
      run: |
        # Fetch ArgoCD token using admin credentials
        ARGOCD_TOKEN=$(curl -k -X POST ${{ secrets.ARGOCD_SERVER }}/api/v1/session \
          -d '{"username":"admin","password":"${{ secrets.ARGOCD_PASSWORD }}"}' \
          -H "Content-Type: application/json" | jq -r .token)
        
        if [ "$ARGOCD_TOKEN" = "null" ] || [ -z "$ARGOCD_TOKEN" ]; then
          echo "❌ Failed to get ArgoCD token"
          exit 1
        fi
        
        echo "✅ Successfully obtained ArgoCD token"
        echo "argocd_token=${ARGOCD_TOKEN}" >> $GITHUB_OUTPUT

    - name: Update ArgoCD Application Image Tag
      run: |
        echo "🚀 Updating ArgoCD application image tag via Kustomization..."
        
        # Get the commit SHA as the tag
        IMAGE_TAG="${{ github.sha }}"
        
        echo "📋 Using image tag: $IMAGE_TAG"
        echo "🎯 Updating image: ghcr.io/sumansaurabh/task-bb/backend:$IMAGE_TAG"
        
        # Update the ArgoCD application with new image tag using Kustomization
        RESPONSE=$(curl -s -w "\n%{http_code}" \
          --location '${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nodejs-app-api' \
          --request PATCH \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ steps.argocd-auth.outputs.argocd_token }}' \
          --data '{
            "spec": {
              "source": {
                "kustomize": {
                  "images": [
                    "ghcr.io/sumansaurabh/task-bb/backend:'$IMAGE_TAG'"
                  ]
                }
              }
            }
          }')
        
        # Check response
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ]; then
            echo "✅ ArgoCD application updated successfully!"
            echo "🎯 Updated image tag to: $IMAGE_TAG"
        else
            echo "❌ Failed to update ArgoCD application (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE_BODY"
            exit 1
        fi

    - name: Trigger ArgoCD Sync
      run: |
        echo "🔄 Triggering ArgoCD sync..."
        
        # Trigger sync to deploy the updated image
        SYNC_RESPONSE=$(curl -s -w "\n%{http_code}" \
          --location '${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nodejs-app-api/sync' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ${{ steps.argocd-auth.outputs.argocd_token }}' \
          --data '{
            "revision": "main",
            "dryRun": false
          }')
        
        # Check sync response
        SYNC_HTTP_CODE=$(echo "$SYNC_RESPONSE" | tail -n1)
        SYNC_RESPONSE_BODY=$(echo "$SYNC_RESPONSE" | head -n -1)
        
        if [ "$SYNC_HTTP_CODE" = "200" ] || [ "$SYNC_HTTP_CODE" = "201" ]; then
            echo "✅ ArgoCD sync triggered successfully!"
            echo "🚀 Deployment is now in progress..."
        else
            echo "❌ Failed to trigger ArgoCD sync (HTTP $SYNC_HTTP_CODE)"
            echo "Response: $SYNC_RESPONSE_BODY"
            exit 1
        fi

    - name: Wait for Sync Completion
      run: |
        echo "⏳ Waiting for sync to complete..."
        
        # Wait for sync to complete (max 5 minutes)
        for i in {1..30}; do
          sleep 10
          
          # Check application status
          STATUS_RESPONSE=$(curl -s \
            --location '${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nodejs-app-api' \
            --header 'Authorization: Bearer ${{ steps.argocd-auth.outputs.argocd_token }}')
          
          SYNC_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status.sync.status // "Unknown"')
          HEALTH_STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status.health.status // "Unknown"')
          
          echo "📊 Sync Status: $SYNC_STATUS | Health Status: $HEALTH_STATUS"
          
          if [ "$SYNC_STATUS" = "Synced" ] && [ "$HEALTH_STATUS" = "Healthy" ]; then
            echo "✅ Application is synced and healthy!"
            break
          elif [ "$SYNC_STATUS" = "Failed" ]; then
            echo "❌ Sync failed!"
            exit 1
          fi
          
          if [ $i -eq 30 ]; then
            echo "⚠️  Timeout waiting for sync completion"
            echo "Current status - Sync: $SYNC_STATUS, Health: $HEALTH_STATUS"
            # Don't fail the build, just warn
          fi
        done

    - name: Create deployment summary
      run: |
        echo "## 🚀 ArgoCD Kustomization Deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Method:** ArgoCD API with Kustomization" >> $GITHUB_STEP_SUMMARY
        echo "**Configuration Source:** Git Repository (Kustomization)" >> $GITHUB_STEP_SUMMARY
        echo "**Image Deployed:** \`ghcr.io/sumansaurabh/task-bb/backend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Images Built:**" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/sumansaurabh/task-bb/backend:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- \`ghcr.io/sumansaurabh/task-bb/backend:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** \`${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Deployment completed using ArgoCD Kustomization approach" >> $GITHUB_STEP_SUMMARY
        echo "🎯 No Git commits needed for image tag updates" >> $GITHUB_STEP_SUMMARY
        echo "📋 Configuration managed in Git, image tags updated via API" >> $GITHUB_STEP_SUMMARY