# .github/workflows/deploy.yaml
name: Build and Deploy Latest

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHC_TOKEN }}

    - name: Build and push latest
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ghcr.io/sumansaurabh/task-bb/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
     
     
    - name: Get ArgoCD Token
      id: argocd-auth
      run: |
        # Fetch ArgoCD token using admin credentials
        ARGOCD_TOKEN=$(curl -k -X POST ${{ secrets.ARGOCD_SERVER }}/api/v1/session \
          -d '{"username":"admin","password":"${{ secrets.ARGOCD_PASSWORD }}"}' \
          -H "Content-Type: application/json" | jq -r .token)
        
        if [ "$ARGOCD_TOKEN" = "null" ] || [ -z "$ARGOCD_TOKEN" ]; then
          echo "❌ Failed to get ArgoCD token"
          exit 1
        fi
        
        echo "✅ Successfully obtained ArgoCD token"
        echo "argocd_token=${ARGOCD_TOKEN}" >> $GITHUB_OUTPUT
    - name: Trigger ArgoCD rolling restart
      run: |
        echo "Triggering ArgoCD to restart deployment..."
        
        # Method 1: Force ArgoCD sync with refresh
        curl -X POST \
          "${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nodejs-app-api/refresh" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}"
        
        sleep 5
        
        curl -X POST \
          "${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nodejs-app-api/sync" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "revision": "main",
            "prune": true,
            "dryRun": false
          }'
        
        # Method 2: Force rolling restart via Kubernetes API
        echo "Forcing rolling restart to pull latest image..."
        
        # Add restart annotation to force pod recreation
        RESTART_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        curl -X PATCH \
          "${{ secrets.ARGOCD_SERVER }}/api/v1/applications/nodejs-app-api" \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "spec": {
              "source": {
                "kustomize": {
                  "patchesStrategicMerge": [
                    "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nodejs-app\nspec:\n  template:\n    metadata:\n      annotations:\n        kubectl.kubernetes.io/restartedAt: \"'$RESTART_TIME'\""
                  ]
                }
              }
            }
          }'

    - name: Create deployment summary
      run: |
        echo "## 🚀 Latest Image Deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`ghcr.io/sumansaurabh/task-bb/backend:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "**Strategy:** Force pull latest with rolling restart" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${GITHUB_SHA:0:7}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ArgoCD will force restart all pods to pull the latest image." >> $GITHUB_STEP_SUMMARY